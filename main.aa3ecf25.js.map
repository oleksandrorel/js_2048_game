{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","startMessage","loseMessage","winMessage","gameScore","rowsCollection","querySelectorAll","arrowButtons","Game","gameField","createGameField","randomRawIndex","randomColumnIndex","moveWasPerformed","mergingHappened","score","loseCheck","randomCellIndex","movesHandler","i","push","Array","fill","addEventListener","className","textContent","classList","add","clearField","createCell","render","newCellValue","Math","ceil","random","emptyCellsArr","length","y","floor","randomValue","e","includes","key","moveUp","rotateMatrix","checkForLose","newIndex","merge","move","value","winGameMessage","remove","clearedField","map","row","el","recordOfScore","arrCopy","cell","children","loseGameMessage","obj","startGame"],"mappings":"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","file":"main.aa3ecf25.js","sourceRoot":"../src","sourcesContent":["\n'use strict';\n\nconst startButton = document.querySelector(`.start`);\nconst startMessage = document.querySelector(`.message-start`);\nconst loseMessage = document.querySelector(`.message-lose`);\nconst winMessage = document.querySelector(`.message-win`);\nconst gameScore = document.querySelector(`.game-score`);\nconst rowsCollection = document.querySelectorAll(`tr`);\nconst arrowButtons = [`ArrowUp`, `ArrowDown`,\n  `ArrowLeft`, `ArrowRight`];\n\nclass Game {\n  constructor() {\n    this.gameField = this.createGameField();\n    this.randomRawIndex = 0;\n    this.randomColumnIndex = 0;\n    this.moveWasPerformed = false;\n    this.mergingHappened = false;\n    this.score = 0;\n    this.loseCheck = false;\n    this.randomCellIndex = 0;\n    this.movesHandler();\n  }\n\n  createGameField() {\n    const gameField = [];\n\n    for (let i = 0; i < 4; i++) {\n      gameField.push(new Array(4).fill(0));\n    }\n\n    return gameField;\n  }\n\n  startGame() {\n    startButton.addEventListener(`click`, () => {\n      startButton.className = `button restart`;\n      startButton.textContent = `Restart`;\n      startMessage.classList.add(`hidden`);\n      loseMessage.classList.add(`hidden`);\n      winMessage.classList.add(`hidden`);\n      this.clearField();\n      this.createCell();\n      this.createCell();\n      this.render();\n    });\n  }\n\n  randomValue() {\n    const random = Math.ceil(Math.random() * 10);\n    const newCellValue = random === 10 ? 4 : 2;\n\n    return newCellValue;\n  }\n\n  createCell() {\n    const emptyCellsArr = [];\n\n    for (let i = 0; i < this.gameField.length; i++) {\n      for (let y = 0; y < this.gameField[i].length; y++) {\n        if (!this.gameField[i][y]) {\n          emptyCellsArr.push([i, y]);\n        }\n      }\n    }\n    this.randomCellIndex = Math.floor(Math.random() * emptyCellsArr.length);\n\n    const randomRawIndex = emptyCellsArr[this.randomCellIndex][0];\n    const randomColumnIndex = emptyCellsArr[this.randomCellIndex][1];\n\n    this.gameField[randomRawIndex][randomColumnIndex] = this.randomValue();\n    this.mergingHappened = false;\n    this.moveWasPerformed = false;\n  }\n\n  movesHandler() {\n    document.addEventListener(`keydown`, (e) => {\n      if (!arrowButtons.includes(e.key)) {\n        return;\n      }\n\n      switch (e.key) {\n        case `ArrowUp`:\n          this.moveUp();\n          break;\n        case `ArrowRight`:\n          this.rotateMatrix();\n          this.rotateMatrix();\n          this.rotateMatrix();\n          this.moveUp();\n          this.rotateMatrix();\n          break;\n        case `ArrowDown`:\n          this.rotateMatrix();\n          this.rotateMatrix();\n          this.moveUp();\n          this.rotateMatrix();\n          this.rotateMatrix();\n          break;\n        case `ArrowLeft`:\n          this.rotateMatrix();\n          this.moveUp();\n          this.rotateMatrix();\n          this.rotateMatrix();\n          this.rotateMatrix();\n          break;\n      }\n      this.render();\n      this.checkForLose();\n    });\n  }\n\n  moveUp() {\n    for (let i = 0; i < this.gameField.length; i++) {\n      for (let y = 0; y < this.gameField[i].length; y++) {\n        if (!this.gameField[i][y]) {\n          continue;\n        }\n\n        for (let newIndex = i + 1; newIndex < 4; newIndex++) {\n          if (this.gameField[i][y] !== this.gameField[newIndex][y]\n             && this.gameField[newIndex][y]) {\n            break;\n          }\n\n          if (this.gameField[i][y] !== this.gameField[newIndex][y]\n             && !this.gameField[newIndex][y]) {\n            continue;\n          }\n\n          this.merge(newIndex, i, y);\n          break;\n        }\n\n        for (let newIndex = 0; newIndex < 4; newIndex++) {\n          if (i <= newIndex) {\n            break;\n          }\n\n          if (!this.gameField[newIndex][y]) {\n            this.move(newIndex, i, y);\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.mergingHappened || this.moveWasPerformed) {\n      this.createCell();\n    }\n  }\n\n  recordOfScore(value) {\n    this.score += value;\n    gameScore.textContent = this.score;\n\n    if (value === 2048) {\n      this.winGameMessage();\n    }\n  }\n\n  winGameMessage() {\n    winMessage.classList.remove(`hidden`);\n  }\n\n  loseGameMessage() {\n    loseMessage.classList.remove(`hidden`);\n  }\n\n  clearField() {\n    const clearedField = this.gameField.map(row =>\n      row.map(el => {\n        return el * 0;\n      })\n    );\n\n    this.gameField = clearedField;\n    this.score = 0;\n    gameScore.textContent = this.score;\n  }\n\n  move(newIndex, i, y) {\n    this.gameField[newIndex][y] = this.gameField[i][y];\n    this.gameField[i][y] = 0;\n    this.moveWasPerformed = true;\n  }\n\n  merge(newIndex, i, y) {\n    this.gameField[newIndex][y] = 0;\n    this.gameField[i][y] *= 2;\n    this.mergingHappened = true;\n    this.recordOfScore(this.gameField[i][y]);\n  }\n\n  rotateMatrix() {\n    const arrCopy = [];\n\n    for (let i = 0; i < 4; i++) {\n      arrCopy.push(new Array(4).fill(0));\n    }\n\n    for (let i = 0; i < this.gameField.length; i++) {\n      for (let y = 0; y < this.gameField[i].length; y++) {\n        arrCopy[i][y] = this.gameField[arrCopy.length - 1 - y][i];\n      }\n    }\n\n    this.gameField = arrCopy;\n  }\n\n  render() {\n    for (let i = 0; i < this.gameField.length; i++) {\n      for (let y = 0; y < this.gameField[i].length; y++) {\n        const cell = rowsCollection[i].children[y];\n\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n        cell.textContent = ``;\n\n        if (!this.gameField[i][y]) {\n          continue;\n        }\n\n        cell.classList.add(`field-cell--${this.gameField[i][y]}`);\n        cell.textContent = this.gameField[i][y];\n      }\n    }\n  }\n\n  checkForLose() {\n    for (let i = 0; i < this.gameField.length; i++) {\n      for (let y = 0; y < this.gameField[i].length; y++) {\n        if (!this.gameField[i][y]) {\n          return;\n        }\n\n        if (i < 3 && this.gameField[i][y] === this.gameField[i + 1][y]) {\n          return;\n        }\n\n        if (y < 3 && this.gameField[i][y] === this.gameField[i][y + 1]) {\n          return;\n        }\n      }\n    }\n    this.loseGameMessage();\n  }\n}\n\nconst obj = new Game();\n\nobj.startGame();\n"]}